name: Workflows

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths:
      - "README.md"

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Lint code
      run: echo "Linting repository"
    - name: Run unit tests
      run: echo "Running tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y jq unzip

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  continuous-development:
    name: Continuous Development
    needs: build-and-push-ecr-image
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull latest image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
      run: |
        docker pull "$REGISTRY/$REPO:latest"

    - name: Stop & remove previous container if exists
      run: |
        docker stop mltest || true
        docker rm mltest || true

    - name: Run Docker image to serve users
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker run -d --restart unless-stopped \
          --name mltest --ipc=host -p 8080:8080 \
          -e AWS_ACCESS_KEY_ID \
          -e AWS_SECRET_ACCESS_KEY \
          -e AWS_REGION \
          "$REGISTRY/$REPO:latest"

    - name: Clean previous images and containers
      run: |
        docker system prune -f