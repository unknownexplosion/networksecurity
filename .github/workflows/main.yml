name: workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Lint code
        run: echo "Linting repository"
      - name: Run unit tests
        run: echo "Running unit tests"
        
  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Verify AWS Configuration
        run: |
          echo "AWS Region: ${{ secrets.AWS_REGION }}"
          echo "ECR Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          aws sts get-caller-identity
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Check repository files and structure
        run: |
          echo "Repository contents:"
          ls -la
          echo ""
          echo "Checking for required files..."
          
          # Check requirements.txt
          if [ ! -f requirements.txt ]; then
            echo "ERROR: requirements.txt not found"
            exit 1
          else
            echo "‚úì requirements.txt found"
            echo "Contents:"
            cat requirements.txt
          fi
          
          # Check app.py
          if [ ! -f app.py ]; then
            echo "ERROR: app.py not found"
            exit 1
          else
            echo "‚úì app.py found"
          fi
          
          # Check if networksecurity directory exists
          if [ ! -d networksecurity ]; then
            echo "WARNING: networksecurity directory not found"
            echo "Creating placeholder structure..."
            mkdir -p networksecurity/templates
            echo '<html><body><h1>Placeholder Template</h1>{{table}}</body></html>' > networksecurity/templates/table.html
          else
            echo "‚úì networksecurity directory found"
          fi
          
          # Check Dockerfile
          if [ ! -f Dockerfile ]; then
            echo "ERROR: Dockerfile not found"
            exit 1
          else
            echo "‚úì Dockerfile found"
            echo "Dockerfile contents:"
            cat Dockerfile
          fi

      - name: Create ECR repository if it doesn't exist
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          echo "Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }} 2>/dev/null || {
            echo "Repository doesn't exist, creating..."
            aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }}
            echo "Repository created successfully"
          }
          echo "ECR repository is ready"
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          set -e  # Exit on any error
          
          echo "Building Docker image..."
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY" 
          echo "Tag: $IMAGE_TAG"
          echo "Full image name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          # Build the Docker image with detailed output
          echo "Starting Docker build..."
          docker build --no-cache --progress=plain -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 2>&1 | tee build.log
          
          # Check if build was successful
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Docker build failed!"
            echo "Last 50 lines of build log:"
            tail -50 build.log
            echo ""
            echo "Full build log:"
            cat build.log
            exit 1
          fi
          
          echo "‚úÖ Docker build successful!"
          echo "Verifying image was created..."
          docker images | grep $ECR_REPOSITORY || {
            echo "‚ùå Image not found after build"
            exit 1
          }
          
          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 2>&1 | tee push.log
          
          # Check if push was successful
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Docker push failed!"
            echo "Push log:"
            cat push.log
            exit 1
          fi
          
          echo "‚úÖ Docker push successful!"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Pre-cleanup Git configuration
        run: |
          echo "Cleaning up any existing Git configuration issues..."
          git config --global --unset-all safe.directory || true
          git config --local --unset-all core.sshCommand || true
          git config --local --unset-all http.https://github.com/.extraheader || true
        continue-on-error: true
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Verify self-hosted runner environment
        run: |
          echo "=== System Information ==="
          uname -a
          echo ""
          echo "=== Docker Version ==="
          docker --version || echo "Docker not installed"
          echo ""
          echo "=== AWS CLI Version ==="
          aws --version || echo "AWS CLI not installed"
          echo ""
          echo "=== Available Disk Space ==="
          df -h
          echo ""
          echo "=== Current Docker Images ==="
          docker images || echo "Cannot list Docker images"
          echo ""
          echo "=== Current Docker Containers ==="
          docker ps -a || echo "Cannot list Docker containers"
        
      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity || {
            echo "‚ùå AWS credentials verification failed"
            exit 1
          }
          echo "‚úÖ AWS credentials working"
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Verify ECR login
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "Testing ECR access..."
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} || {
            echo "‚ùå Cannot access ECR repository"
            exit 1
          }
          echo "‚úÖ ECR access verified"
          
      - name: Pull latest images
        run: |
          echo "Pulling image: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest || {
            echo "‚ùå Failed to pull image from ECR"
            echo "Checking if image exists in ECR..."
            aws ecr list-images --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} --region ${{ secrets.AWS_REGION }}
            exit 1
          }
          echo "‚úÖ Image pulled successfully"
          
      - name: Stop and remove existing container
        run: |
          echo "Checking for existing container..."
          if [ "$(docker ps -q -f name=networksecurity)" ]; then
            echo "Stopping existing container..."
            docker stop networksecurity || echo "Failed to stop container"
            docker rm networksecurity || echo "Failed to remove container"
            echo "‚úÖ Existing container removed"
          else
            echo "No existing container found"
          fi
          
          # Also check for stopped containers
          if [ "$(docker ps -aq -f name=networksecurity)" ]; then
            echo "Removing stopped container..."
            docker rm networksecurity || echo "Failed to remove stopped container"
          fi
        continue-on-error: true
        
      - name: Verify port availability
        run: |
          echo "Checking if port 8000 is available..."
          if netstat -tuln | grep :8000; then
            echo "‚ö†Ô∏è Port 8000 is already in use:"
            netstat -tuln | grep :8000
            echo "Attempting to find and kill processes using port 8000..."
            sudo lsof -ti:8000 | xargs -r sudo kill -9 || echo "No processes found on port 8000"
          else
            echo "‚úÖ Port 8000 is available"
          fi
        continue-on-error: true
        
      - name: Run Docker Image to serve users
        run: |
          echo "Starting new container..."
          docker run -d \
            -p 8000:8000 \
            --ipc="host" \
            --name=networksecurity \
            --restart=unless-stopped \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            -e MONGODB_URL_KEY="${{ secrets.MONGODB_URL_KEY }}" \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest || {
            echo "‚ùå Failed to start container"
            echo "Docker logs:"
            docker logs networksecurity 2>/dev/null || echo "No logs available"
            exit 1
          }
          echo "‚úÖ Container started successfully"
            
      - name: Verify container is running
        run: |
          echo "Waiting for container to initialize..."
          sleep 15
          
          echo "Checking container status..."
          if [ "$(docker ps -q -f name=networksecurity)" ]; then
            echo "‚úÖ Container is running successfully"
            echo ""
            echo "Container details:"
            docker ps -f name=networksecurity --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            echo "Container logs (last 20 lines):"
            docker logs --tail 20 networksecurity
            echo ""
            echo "Testing application endpoint..."
            curl -f http://localhost:8000/docs || echo "‚ö†Ô∏è Application not responding yet"
          else
            echo "‚ùå Container failed to start or stopped unexpectedly"
            echo ""
            echo "Container logs:"
            docker logs networksecurity || echo "No logs available"
            echo ""
            echo "All containers:"
            docker ps -a
            exit 1
          fi
          
      - name: Clean previous images and containers
        run: |
          echo "Cleaning up old Docker resources..."
          docker system prune -f
          echo "‚úÖ Cleanup completed"
          
      - name: Post-deployment Git cleanup
        run: |
          echo "Cleaning up Git configuration..."
          git config --global --unset-all safe.directory || true
          git config --local --unset-all core.sshCommand || true
          git config --local --unset-all http.https://github.com/.extraheader || true
        continue-on-error: true