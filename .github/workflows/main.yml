name: workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Lint code
        run: echo "Linting repository"
      - name: Run unit tests
        run: echo "Running unit tests"
        
  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Verify AWS Configuration
        run: |
          echo "AWS Region: ${{ secrets.AWS_REGION }}"
          echo "ECR Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          aws sts get-caller-identity
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Verify Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "ERROR: Dockerfile not found in repository root"
            ls -la
            exit 1
          fi
          echo "Dockerfile found"
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY" 
          echo "Tag: $IMAGE_TAG"
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . || {
            echo "Docker build failed"
            exit 1
          }
          
          echo "Docker build successful, pushing to ECR..."
          
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || {
            echo "Docker push failed"
            exit 1
          }
          
          echo "Docker push successful"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Pull latest images
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          
      - name: Stop and remove existing container
        run: |
          if [ $(docker ps -q -f name=networksecurity) ]; then
            echo "Stopping existing container..."
            docker stop networksecurity
            docker rm networksecurity
          else
            echo "No existing container found"
          fi
        continue-on-error: true
        
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 \
            --ipc="host" \
            --name=networksecurity \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            
      - name: Verify container is running
        run: |
          sleep 10
          if [ $(docker ps -q -f name=networksecurity) ]; then
            echo "Container is running successfully"
            docker ps -f name=networksecurity
          else
            echo "Container failed to start"
            docker logs networksecurity
            exit 1
          fi
          
      - name: Clean previous images and containers
        run: |
          docker system prune -f