name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: latest

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Quick sanity checks
        run: |
          set -euxo pipefail
          echo "Docker:" && docker --version
          echo "Git:" && git --version

      - name: Free disk space (before build)
        run: |
          df -h
          docker system prune -af || true
          sudo apt-get clean
          df -h

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Who am I on AWS?
        run: |
          set -euxo pipefail
          aws --version
          aws sts get-caller-identity

      - name: Ensure ECR repository exists
        id: ensure-repo
        env:
          REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          set -euxo pipefail
          if ! aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO" >/dev/null
            echo "created=true" >> "$GITHUB_OUTPUT"
          else
            echo "created=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Validate required env
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          set -euo pipefail
          test -n "${ECR_REPOSITORY}" || (echo "ECR_REPOSITORY_NAME secret is empty"; exit 2)

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          set -euxo pipefail
          echo "Using registry: $ECR_REGISTRY"
          echo "Using repo:     $ECR_REPOSITORY"
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Free disk space (after build)
        run: docker system prune -af --volumes || true